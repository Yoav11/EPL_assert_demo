using com.apama.exceptions.Exception;
using com.apamax.test.Assert;

event device {
	string name;
	string type;
	string ip;

	static action create(string name, string type, string ip) returns device {
		device temp := new device;

		temp.name := name;
		temp.type := type;
		temp.ip := ip;
		return temp;
	}
}


monitor AssertTest {
	/** Initialize the application */
	action onload() {
		dictionary<string, any> options := {
			"isEnabled": true,
			"logLevel": "ERROR"
		};

		Assert asserter := Assert.createCustom(options);

		device device1 := device.create("CZ-3", "droid", "127.0.0.1");
		device device2 := device.create("CZ-3", "droid", "127.2.0.1");

		asserter.assertEquals("sensors should be the same", device2, device1);
		asserter.assertEquals("log messages should be the same ", "Executed engine_inject <correlator> [test.mon]", "Executed engine_deploy <correlator> [test.mon]");

		asserter.assertNotEquals("floats should not be the same", 3.56, 3.57);

		asserter.assertInRange("value falls in the range", 3, 2, 4);

		asserter.assertTrue("two plus two is four", (2+2)=4);

		asserter.assertGreaterThan("four is greater than one", 1, 4);



		asserter.assertLesserThan("lesserThanStringTest", "Hello", "Helloo");
		asserter.assertLesserThan("lesserThanFloatTest", -0.19, -0.20);

		asserter.assertThrows("throwTest1", addTo1, [2]);
		asserter.assertThrows("throwTest2", addTo1, [1]);

		asserter.assertNoThrow("noThrowTest1", addTo1, [1]);
		asserter.assertNoThrow("noThrowTest2", addTo1, [2]);

		asserter.assertThrowsException("specificThrowTest1", addTo1, [2], "IllegalArgumentException");
		asserter.assertThrowsException("specificThrowTest2", addTo1, [2], "ArithmeticException");

		asserter.assertContains("containsTest1", device1, "id");
		asserter.assertContains("containsTest2", device1, "name");
	}

	action addTo1(integer i) returns integer {
		if(i != 1) {
			throw Exception("Argument is not 1", "IllegalArgumentException");
		} else {
			return i + 1;
		}
	}
}