package com.apamax.test;

using com.apama.exceptions.Exception;

/**
 * An assertion class for testing epl applications
 */
event Assert {

	// Private
	boolean isEnabled;
	string logLevel;

	/** Creates an instance of the Assert event to run assertions from.
	 * this will set private variables logLevel to "ERROR" and isEnabled to true
	 */
	static action create() returns Assert {
		Assert temp := new Assert;

		temp.isEnabled := true;
		temp.logLevel := "ERROR";

		return temp;
	}

	/** Creates an instance of the Assert event to run assertions from, with custom arguments.
	 * @param options dictionary<string, any>, options include:
	 *	<boolean>isEnabled - set to true to enable logging
	 *	<string>logLevel - either "ERROR" or "DEBUG" sets logging level.
	 */
	static action createCustom(dictionary<string, any> options) returns Assert {
		Assert temp := new Assert;

		if(options.hasKey("isEnabled")) {
			temp.isEnabled := <boolean>options["isEnabled"];
		} else {
			temp.isEnabled := true;
		}

		if(options.hasKey("logLevel")) {
			temp.logLevel := <string>options["logLevel"];
		} else {
			temp.logLevel := "ERROR";
		}

		return temp;
	}

    /** Logs an assertion failure when test does not pass.
	 * @param pass set to true if a test passes, false if it fails.
	 * @param testName name of test being asserted.
     * @param message custom message with information about test failure.
	 */
	action assertBase(boolean pass, string testName, string message) {
		if (not pass) {
			string template := "FAILED " + testName +  " - assert ";
			if(logLevel = "ERROR") {
				log template + message at ERROR;
			} else if (logLevel = "DEBUG") {
				log template + message at DEBUG;
			} else {
				log "FAIL - please set a valid log level for Assert instance, use ERROR or DEBUG";
			}
		}
	}

    /** 
     * Asserts that two values are equal. Uses different handling depending on type:
     *
     * Integer, string, boolean - uses the '=' operator.
     * 
     * float - checks equality within a tolerance of 0.0001.
     *
     * others - uses the any .getFields() method as a comparator.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	action assertEquals(string testName, any testVal, any refVal) {
		if(isEnabled) {
			string message := testVal.valueToString() + " = " + refVal.valueToString();
			switch(testVal as castedVal) {
				case decimal: {
					decimal tol := 1e-398d;
					assertBase((castedVal-<decimal>refVal).nextafter(1.0d) = tol, testName, message);
				}
				case float: {
					float tol := 5e-324;
					assertBase((castedVal-<float>refVal).nextafter(1.0) = tol, testName, message);
				}
				default: {
					assertBase(testVal = refVal, testName, message);
				}
			}
		}
	}

    /** 
     * Asserts that two values are not equal. Uses different handling depending on type:
     *
     * Integer, string, boolean - uses the '=' operator.
     * 
     * float - checks inequality within a tolerance of 0.0001.
     *
     * others - uses the any .getFields() method as a comparator.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	action assertNotEquals(string testName, any testVal, any refVal) {
		if(isEnabled) {
			string message := testVal.valueToString() + " = " + refVal.valueToString() + " when expecting values to not equal";

			switch(testVal as castedVal) {
				case decimal: {
					decimal tol := 1e-398d;
					assertBase((castedVal-<decimal>refVal).nextafter(1.0d) != tol, testName, message);
				}
				case float: {
					float tol := 5e-324;
					assertBase((castedVal-<float>refVal).nextafter(1.0) != tol, testName, message);
				}
				default: {
					assertBase(testVal != refVal, testName, message);
				}
			}
		}
	}

	/** 
     * Asserts that a value lies within a range. Supports integers and floats as test val.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param lowerBound lower bound for the range. must be of the same type as testVal.
	 * @param higherBound higher bound for the range. must be of the same type as testVal.
	 */
	action assertInRange(string testName, any testVal, any lowerBound, any higherBound) {
		if(isEnabled) {
			string message := testVal.valueToString() + " is not in the range " + lowerBound.valueToString() + "-" + higherBound.valueToString();

			if(lowerBound > higherBound) {
				assertBase(false, testName, " lowerBound must be smaller than higherBound");
			}

			switch(testVal as castedVal) {
				case integer: {
					assertBase(castedVal >= <integer>lowerBound and castedVal <= <integer>higherBound, testName, message);
				}
				case float: {
					assertBase(castedVal >= <float>lowerBound and castedVal <= <float>higherBound, testName, message);
				}
				case decimal: {
					assertBase(castedVal >= <decimal>lowerBound and castedVal <= <decimal>higherBound, testName, message);
				}
				default: {
					assertBase(false, testName, "invalid input type");
				}
			}
		}
	}

    /** 
     * Asserts that a value is true.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
	 */
	action assertTrue(string testName, boolean testVal) {
		if(isEnabled) {
			string message := "expression is false when expecting true";

			assertBase(testVal, testName, message);
		}
	}

    /** 
     * Asserts that a value is false.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
	 */
	action assertFalse(string testName, boolean testVal) {
		if(isEnabled) {
			string message := "expression is true when expecting false";

			assertBase(testVal, testName, message);
		}
	}

    /** 
     * Asserts that testVal is greater than refVal.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	action assertGreaterThan(string testName, any testVal, any refVal) {
		if(isEnabled) {
			string message := testVal.valueToString() + " <= " + refVal.valueToString();

			switch(testVal as castedVal) {
				case integer: {
					assertBase(castedVal > <integer>refVal, testName, message);
				}
				case string: {
					assertBase(castedVal > <string> refVal, testName, message);
				}
				case float: {
					float tol := 5e-324;
					assertBase((castedVal-<float>refVal) > tol, testName, message);
				}
				case decimal: {
					decimal tol := 1e-398d;
					assertBase((castedVal-<decimal>refVal) > tol, testName, message);
				}
				default: {
					assertBase(false, testName, "invalid input type");
				}
			}
		}
	}

    /** 
     * Asserts that testVal is lesser than refVal.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	action assertLesserThan(string testName, any testVal, any refVal) {
		if(isEnabled) {
			string message := testVal.valueToString() + " >= " + refVal.valueToString();

			switch(testVal as castedVal) {
				case integer: {
					assertBase(castedVal < <integer>refVal, testName, message);
				}
				case string: {
					assertBase(castedVal < <string> refVal, testName, message);
				}
				case float: {
					float tol := 0.0001;
					assertBase((castedVal-<float>refVal) < -tol, testName, message);
				}
				case decimal: {
					decimal tol := 1e-398d;
					assertBase((castedVal-<decimal>refVal) < -tol, testName, message);
				}
				default: {
					assertBase(false, testName, "invalid input type");
				}
			}
		}
	}

    /** 
     * Asserts that an action throws an exception
	 * @param testName name of test being asserted.
	 * @param testFn action being tested.
     * @param args arguments to pass to testFn.
	 */
	action assertThrows(string testName, any testFn, any args) {
		if(isEnabled) {
			try {
				any temp := testFn.getGenericAction()(args.getEntries());

				string message := "function did not throw error when expecting to";
				assertBase(false, testName, message);
			} catch (Exception e) {
				return;
			}
		}
	}

    /** 
     * Asserts that an action does not throw an exception
	 * @param testName name of test being asserted.
	 * @param testFn action being tested.
     * @param args arguments to pass to testFn.
	 */
	action assertNoThrow(string testName, any testFn, any args) {
		if(isEnabled) {
			try {
				any temp := testFn.getGenericAction()(args.getEntries());
			} catch (Exception e) {
				string message := "function threw error when not expected to: " + e.toString();
				assertBase(false, testName, message);
			}
		}
	}

    /** 
     * Asserts that an action throws a specific exception type
	 * @param testName name of test being asserted.
	 * @param testFn action being tested.
     * @param args arguments to pass to testFn.
     * @param exceptionType type of exception expected to be thrown
	 */
	action assertThrowsException(string testName, any testFn, any args, string exceptionType) {
		if(isEnabled) {
			try {
				any temp := testFn.getGenericAction()(args.getEntries());

				string message := "function did not throw error when expecting to";
				assertBase(false, testName, message);
			} catch (Exception e) {
				if (e.getType() = exceptionType) {
					return;
				} else {
					string message := "function threw " + e.getType() + " when expecting a " + exceptionType + " exception";
					assertBase(false, testName, message);
				}
			}
		}
	}

    /** 
     * Asserts that an event contains a specific field
	 * @param testName name of test being asserted.
	 * @param testVal event being tested.
     * @param fieldName name of the field being inspected.
	 */
	action assertContains(string testName, any testVal, string fieldName) {
		if(isEnabled) {
			try {
				string value := testVal.getFieldString(fieldName);
			} catch (Exception e) {
				string message := testVal.toString() + " does not contain field " + fieldName;
				assertBase(false, testName, message);
			}
		}
	}

}