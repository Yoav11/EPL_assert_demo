package com.apamax.test;

using com.apama.exceptions.Exception;

/**
 * An assertion class for testing epl applications
 */
event Asserts {
    /** Logs an assertion failure when test does not pass.
	 * @param pass set to true if a test passes, false if it fails.
	 * @param testName name of test being asserted.
     * @param message custom message with information about test failure.
	 */
	static action assertBase(boolean pass, string testName, string message) {
		if (not pass) {
			log "FAIL - " + testName + " Assertion error: " + message at ERROR;
		}
	}

    /** 
     * Asserts that two values are equal. Uses different handling depending on type:
     *
     * Integer, string, boolean - uses the '=' operator.
     * 
     * float - checks equality within a tolerance of 0.0001.
     *
     * others - uses the any .getFields() method as a comparator.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	static action assertEquals(string testName, any testVal, any refVal) {

		string message := testVal.valueToString() + " != " + refVal.valueToString();

		switch(testVal as castedVal) {
			case integer: {
				assertBase(castedVal = <integer>refVal, testName, message);
			}
			case string: {
				assertBase(castedVal = <string> refVal, testName, message);
			}
			case boolean: {
				assertBase(castedVal = <boolean> refVal, testName, message);
			}
			case float: {
				float tol := 0.0001;
				assertBase((castedVal-<float>refVal).abs() < tol, testName, message);
			}
			default: {
				assertBase(testVal.getFields() = refVal.getFields(), testName, message);
			}
		}
	}

    /** 
     * Asserts that two values are not equal. Uses different handling depending on type:
     *
     * Integer, string, boolean - uses the '=' operator.
     * 
     * float - checks inequality within a tolerance of 0.0001.
     *
     * others - uses the any .getFields() method as a comparator.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	static action assertNotEquals(string testName, any testVal, any refVal) {
		string message := testVal.valueToString() + " = " + refVal.valueToString() + " when expecting values to not equal";

		switch(testVal as castedVal) {
			case integer: {
				assertBase(castedVal != <integer>refVal, testName, message);
			}
			case string: {
				assertBase(castedVal != <string> refVal, testName, message);
			}
			case boolean: {
				assertBase(castedVal != <boolean> refVal, testName, message);
			}
			case float: {
				float tol := 0.0001;
				assertBase((castedVal-<float>refVal).abs() > tol, testName, message);
			}
			default: {
				assertBase(testVal.getFields() != refVal.getFields(), testName, message);
			}
		}
	}

    /** 
     * Asserts that a value is true.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
	 */
	static action assertTrue(string testName, boolean testVal) {
		string message := "expression is false when expecting true";

		assertBase(testVal, testName, message);
	}

    /** 
     * Asserts that a value is false.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
	 */
	static action assertFalse(string testName, boolean testVal) {
		string message := "expression is true when expecting false";

		assertBase(testVal, testName, message);
	}

    /** 
     * Asserts that testVal is greater than refVal.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	static action assertGreaterThan(string testName, any testVal, any refVal) {
		string message := testVal.valueToString() + " <= " + refVal.valueToString();

		switch(testVal as castedVal) {
			case integer: {
				assertBase(castedVal > <integer>refVal, testName, message);
			}
			case string: {
				assertBase(castedVal > <string> refVal, testName, message);
			}
			case float: {
				float tol := 0.0001;
				assertBase((castedVal-<float>refVal) > tol, testName, message);
			}
			default: {
				//TODO
			}
		}
	}

    /** 
     * Asserts that testVal is lesser than refVal.
	 * @param testName name of test being asserted.
	 * @param testVal value to test.
     * @param refVal value to compare testVal to.
	 */
	static action assertLesserThan(string testName, any testVal, any refVal) {
		string message := testVal.valueToString() + " >= " + refVal.valueToString();

		switch(testVal as castedVal) {
			case integer: {
				assertBase(castedVal < <integer>refVal, testName, message);
			}
			case string: {
				assertBase(castedVal < <string> refVal, testName, message);
			}
			case float: {
				float tol := 0.0001;
				assertBase((castedVal-<float>refVal) < -tol, testName, message);
			}
			default: {
				//TODO
			}
		}
	}

    /** 
     * Asserts that an action throws an exception
	 * @param testName name of test being asserted.
	 * @param testFn action being tested.
     * @param args arguments to pass to testFn.
	 */
	static action assertThrows(string testName, any testFn, any args) {
		try {
			any temp := testFn.getGenericAction()(args.getEntries());

			string message := "function did not throw error when expecting to";
			assertBase(false, testName, message);
		} catch (Exception e) {
			return;
		}
	}

    /** 
     * Asserts that an action does not throw an exception
	 * @param testName name of test being asserted.
	 * @param testFn action being tested.
     * @param args arguments to pass to testFn.
	 */
	static action assertNoThrow(string testName, any testFn, any args) {
		try {
			any temp := testFn.getGenericAction()(args.getEntries());
		} catch (Exception e) {
			string message := "function threw error when not expected to: " + e.toString();
			assertBase(false, testName, message);
		}
	}

    /** 
     * Asserts that an action throws a specific exception type
	 * @param testName name of test being asserted.
	 * @param testFn action being tested.
     * @param args arguments to pass to testFn.
     * @param exceptionType type of exception expected to be thrown
	 */
	static action assertThrowsException(string testName, any testFn, any args, string exceptionType) {
		try {
			any temp := testFn.getGenericAction()(args.getEntries());

			string message := "function did not throw error when expecting to";
			assertBase(false, testName, message);
		} catch (Exception e) {
			if (e.getType() = exceptionType) {
				return;
			} else {
				string message := "function threw " + e.getType() + " when expecting a " + exceptionType + " exception";
				assertBase(false, testName, message);
			}
		}
	}

    /** 
     * Asserts that an event contains a specific field
	 * @param testName name of test being asserted.
	 * @param testVal event being tested.
     * @param fieldName name of the field being inspected.
	 */
	static action assertContains(string testName, any testVal, string fieldName) {
		try {
			string value := testVal.getFieldString(fieldName);
		} catch (Exception e) {
			string message := testVal.toString() + " does not contain field " + fieldName;
			assertBase(false, testName, message);
		}
	}

}