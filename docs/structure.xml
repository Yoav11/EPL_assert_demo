<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../" display="com.apamax.test" name="com.apamax.test"><Type category="Event" name="Assert"><Description><![CDATA[An assertion class for testing epl applications]]></Description><Summary><![CDATA[An assertion class for testing epl applications]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="isEnabled" type="boolean"><TypeParameters/></Member><Member name="logLevel" type="string"><TypeParameters/></Member><Action name="assertLesserThan" staticNature=""><Description><![CDATA[Asserts that testVal is lesser than refVal.]]></Description><Summary><![CDATA[Asserts that testVal is lesser than refVal.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testVal" type="any"><Description><![CDATA[value to test.]]></Description></Parameter><Parameter name="refVal" type="any"><Description><![CDATA[value to compare testVal to.]]></Description></Parameter></Parameters></Action><Action name="assertInRange" staticNature=""><Description><![CDATA[Asserts that a value lies within a range. Supports integers and floats as test val.]]></Description><Summary><![CDATA[Asserts that a value lies within a range. Supports integers and floats as test val.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testVal" type="any"><Description><![CDATA[value to test.]]></Description></Parameter><Parameter name="lowerBound" type="any"><Description><![CDATA[lower bound for the range. must be of the same type as testVal.]]></Description></Parameter><Parameter name="higherBound" type="any"><Description><![CDATA[higher bound for the range. must be of the same type as testVal.]]></Description></Parameter></Parameters></Action><Action name="createCustom" staticNature="static "><Description><![CDATA[Creates an instance of the Assert event to run assertions from, with custom arguments.]]></Description><Summary><![CDATA[Creates an instance of the Assert event to run assertions from, with custom arguments.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.test" type="Assert"/><Parameters><Parameter name="options" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[dictionary<string, any>, options include: <boolean>isEnabled - set to true to enable logging <string>logLevel - either "ERROR" or "DEBUG" sets logging level.]]></Description></Parameter></Parameters></Action><Action name="assertFalse" staticNature=""><Description><![CDATA[Asserts that a value is false.]]></Description><Summary><![CDATA[Asserts that a value is false.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testVal" type="boolean"><Description><![CDATA[value to test.]]></Description></Parameter></Parameters></Action><Action name="assertEquals" staticNature=""><Description><![CDATA[Asserts that two values are equal. Uses different handling depending on type:

 Integer, string, boolean - uses the '=' operator.

 float - checks equality within a tolerance of 0.0001.

 others - uses the any .getFields() method as a comparator.]]></Description><Summary><![CDATA[Asserts that two values are equal. Uses different handling depending on type:]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="actual" type="any"/><Parameter name="expected" type="any"/></Parameters></Action><Action name="assertGreaterThan" staticNature=""><Description><![CDATA[Asserts that testVal is greater than refVal.]]></Description><Summary><![CDATA[Asserts that testVal is greater than refVal.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testVal" type="any"><Description><![CDATA[value to test.]]></Description></Parameter><Parameter name="refVal" type="any"><Description><![CDATA[value to compare testVal to.]]></Description></Parameter></Parameters></Action><Action name="assertContains" staticNature=""><Description><![CDATA[Asserts that an event contains a specific field]]></Description><Summary><![CDATA[Asserts that an event contains a specific field]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testVal" type="any"><Description><![CDATA[event being tested.]]></Description></Parameter><Parameter name="fieldName" type="string"><Description><![CDATA[name of the field being inspected.]]></Description></Parameter></Parameters></Action><Action name="assertBase" staticNature=""><Description><![CDATA[Logs an assertion failure when test does not pass.]]></Description><Summary><![CDATA[Logs an assertion failure when test does not pass.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="pass" type="boolean"><Description><![CDATA[set to true if a test passes, false if it fails.]]></Description></Parameter><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="message" type="string"><Description><![CDATA[custom message with information about test failure.]]></Description></Parameter></Parameters></Action><Action name="assertNoThrow" staticNature=""><Description><![CDATA[Asserts that an action does not throw an exception]]></Description><Summary><![CDATA[Asserts that an action does not throw an exception]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testFn" type="any"><Description><![CDATA[action being tested.]]></Description></Parameter><Parameter name="args" type="any"><Description><![CDATA[arguments to pass to testFn.]]></Description></Parameter></Parameters></Action><Action name="assertTrue" staticNature=""><Description><![CDATA[Asserts that a value is true.]]></Description><Summary><![CDATA[Asserts that a value is true.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testVal" type="boolean"><Description><![CDATA[value to test.]]></Description></Parameter></Parameters></Action><Action name="create" staticNature="static "><Description><![CDATA[Creates an instance of the Assert event to run assertions from. this will set private variables logLevel to "ERROR" and isEnabled to true]]></Description><Summary><![CDATA[Creates an instance of the Assert event to run assertions from. this will set private variables logLevel to "ERROR" and isEnabled to true]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.test" type="Assert"/></Action><Action name="assertThrowsException" staticNature=""><Description><![CDATA[Asserts that an action throws a specific exception type]]></Description><Summary><![CDATA[Asserts that an action throws a specific exception type]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testFn" type="any"><Description><![CDATA[action being tested.]]></Description></Parameter><Parameter name="args" type="any"><Description><![CDATA[arguments to pass to testFn.]]></Description></Parameter><Parameter name="exceptionType" type="string"><Description><![CDATA[type of exception expected to be thrown]]></Description></Parameter></Parameters></Action><Action name="assertThrows" staticNature=""><Description><![CDATA[Asserts that an action throws an exception]]></Description><Summary><![CDATA[Asserts that an action throws an exception]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testFn" type="any"><Description><![CDATA[action being tested.]]></Description></Parameter><Parameter name="args" type="any"><Description><![CDATA[arguments to pass to testFn.]]></Description></Parameter></Parameters></Action><Action name="assertNotEquals" staticNature=""><Description><![CDATA[Asserts that two values are not equal. Uses different handling depending on type:

 Integer, string, boolean - uses the '=' operator.

 float - checks inequality within a tolerance of 0.0001.

 others - uses the any .getFields() method as a comparator.]]></Description><Summary><![CDATA[Asserts that two values are not equal. Uses different handling depending on type:]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="testName" type="string"><Description><![CDATA[name of test being asserted.]]></Description></Parameter><Parameter name="testVal" type="any"><Description><![CDATA[value to test.]]></Description></Parameter><Parameter name="refVal" type="any"><Description><![CDATA[value to compare testVal to.]]></Description></Parameter></Parameters></Action></Type></Package></Packages>