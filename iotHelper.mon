using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.ObjectCommitted;
using com.apama.cumulocity.ObjectCommitFailed;
using com.apama.cumulocity.Util;
using com.apama.cumulocity.Alarm;

event DeviceCreated {
	string deviceId;
	integer reqId;
}

event iotHelper {	
	constant string VALUE_FRAGMENT_TYPE := "myFragment";
	constant string VALUE_SERIES_TYPE := "mySeries";
	constant string DEVICE_TYPE := "testDevice";
	constant string TEST_DEVICE_PREFIX := "PYSYS_";
	constant string MEASUREMENT_TYPE := "myMeasurementType";

	string ALARM_TYPE;
	float MEASUREMENT_THRESHOLD;
	float ALARM_WAIT_TIMEOUT;

	static action create()  returns iotHelper
	{
		iotHelper temp := new iotHelper;

		return temp;
	}

	/**
	Creates a device simulator to be the source of the measurement. 
	@param name The name of our device simulator.
	@returns The reqId of the ManagedObject event sent to create a device.
	*/
	action createNewDevice(string name) returns integer 
	{
		ManagedObject mo := new ManagedObject;
		mo.type := DEVICE_TYPE;
		
		// Any devices with naming prefix "PYSYS_" and the c8y_IsDevice property 
		// will be cleaned from the tenant by the test framework  
		mo.name := TEST_DEVICE_PREFIX + name; 
		mo.params.add("c8y_IsDevice", new dictionary<any, any>);

		// Create a ManagedObject in Cumulocity IoT and receive a response event confirming the change
		integer reqId := Util.generateReqId();
		send mo.withResponse(reqId, new dictionary<string, string>) to ManagedObject.SEND_CHANNEL;

		// Listener for when device has been created
		on ObjectCommitted(reqId=reqId) as resp
		and not ObjectCommitFailed(reqId=reqId)
		{
			ManagedObject device := <ManagedObject> resp.object; 
			log "New simulator device created " + device.id at INFO;
			send DeviceCreated(device.id, reqId) to "TEST_CHANNEL";
		}
		// Listener for if creation of device fails
		on ObjectCommitFailed(reqId=reqId) as resp
		and not ObjectCommitted(reqId=reqId)
		{
			log "Unable to create simulator device, reason : " + resp.toString() at ERROR;
			// Cause test to fail early, rather than wait for timeout
			die;
		}
		return reqId;
	}

	/**
	Sends a measurement with a given value to Cumulocity IoT.  
	@param source The id of the ManagedObject that is the source of the measurement. 
	@param value The value of the measurement to be sent.
	@returns The reqId of the measurement event.
	*/
	action sendMeasurement(string source, float value) returns integer
	{
		Measurement m := new Measurement;
		m.source := source;
		m.time := currentTime;
		m.type := MEASUREMENT_TYPE;
		m.measurements.getOrAddDefault(VALUE_FRAGMENT_TYPE).getOrAddDefault(VALUE_SERIES_TYPE).value := value;
		
		integer reqId := Util.generateReqId();
		send m.withResponse(reqId, new dictionary<string, string>) to Measurement.SEND_CHANNEL;

		// Listener for if creation of measurement fails
		on ObjectCommitFailed(reqId=reqId) as resp
		and not ObjectCommitted(reqId=reqId) 
		{
			log "Unable to create measurement, reason : " + resp.toString() at ERROR;
			// Cause test to fail early, rather than wait for timeout
			die; 
		}
		return reqId;
    }
}